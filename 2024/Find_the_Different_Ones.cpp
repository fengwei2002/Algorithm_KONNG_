#include <bits/stdc++.h> using namespace std; #ifdef LOCAL #include "algo/dbg.h" #else #define dbg(...) 1 #endif /* https://gist.github.com/funcdfs */ using i64 = int64_t; using u64 = uint64_t; using f64 = double; using i128 = __int128_t; auto solve(int _case) -> void { dbg(_case); int n = 0; cin >> n; vector<int> a(n + 1, 0); for (int i = 1; i <= n; i++) { cin >> a[i]; } vector<int> diff(n + 1, 0); for (int i = 1; i <= n; i++) { if (a[i] == a[i - 1]) { diff[i] = diff[i - 1]; } else { diff[i] = i - 1; } } int q = 0; cin >> q; for (int qi = 0, l = 0, r = 0; qi < q; qi++) { cin >> l >> r; if (diff[r] >= l and r > l) { cout << format("{0} {1}\n", diff[r], r); } else { cout << format("{0} {0}\n", -1); } } cout << format("\n"); return; } auto main() -> int32_t { cin.tie(nullptr), cout.tie(nullptr), ios::sync_with_stdio(false); int TT = 0; cin >> TT; for (int _case = 1; _case <= TT; _case++) { solve(_case); } return 0; } /* */