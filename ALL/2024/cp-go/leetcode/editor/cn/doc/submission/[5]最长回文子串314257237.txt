func longestPalindrome(ss string) string {
    s := []rune(ss) 
    n := len(s) 
    ans := make([]rune, 0) 
    
    for i := 0; i < n; i++ {
        l, r := i-1, i+1 
        for l >= 0 && r < n && l < r && s[l] == s[r] {
            l, r = l-1, r+1
        }
        l, r = l+1, r-1
        
        ansLength := r - l + 1
        if len(ans) < ansLength {
            ans = s[l:l+ansLength]
        }
        l, r = i, i+1 
        for l >= 0 && r < n && l < r && s[l] == s[r] {
            l, r = l-1, r+1
        }
        l, r = l+1, r-1
        
        ansLength = r - l + 1
        if len(ans) < ansLength {
            ans = s[l:l+ansLength]
        }
    }
    
    return string(ans)
}
//runtime:4 ms
//memory:3 MB
